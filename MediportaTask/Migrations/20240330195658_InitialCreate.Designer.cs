// <auto-generated />
using System;
using System.Collections.Generic;
using MediportaTask.ContextDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediportaTask.Migrations
{
    [DbContext(typeof(TagDbContext))]
    [Migration("20240330195658_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediportaTask.Model.Collective", b =>
                {
                    b.Property<int>("CollectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectiveId"));

                    b.Property<int?>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("CollectiveId");

                    b.HasIndex("TagId");

                    b.ToTable("Collectives");
                });

            modelBuilder.Entity("MediportaTask.Model.ExternalLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LinkId"));

                    b.Property<int?>("CollectiveId")
                        .HasColumnType("integer");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LinkId");

                    b.HasIndex("CollectiveId");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("MediportaTask.Model.StackOverflowResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResponseId"));

                    b.Property<bool>("has_more")
                        .HasColumnType("boolean");

                    b.Property<int>("quota_max")
                        .HasColumnType("integer");

                    b.Property<int>("quota_remaining")
                        .HasColumnType("integer");

                    b.HasKey("ResponseId");

                    b.ToTable("StackOverflowResponses");
                });

            modelBuilder.Entity("MediportaTask.Model.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<int?>("StackOverflowResponseResponseId")
                        .HasColumnType("integer");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<bool>("has_synonyms")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_moderator_only")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_required")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("percentage")
                        .HasColumnType("double precision");

                    b.HasKey("TagId");

                    b.HasIndex("StackOverflowResponseResponseId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MediportaTask.Model.Collective", b =>
                {
                    b.HasOne("MediportaTask.Model.Tag", null)
                        .WithMany("collectives")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("MediportaTask.Model.ExternalLink", b =>
                {
                    b.HasOne("MediportaTask.Model.Collective", null)
                        .WithMany("external_links")
                        .HasForeignKey("CollectiveId");
                });

            modelBuilder.Entity("MediportaTask.Model.Tag", b =>
                {
                    b.HasOne("MediportaTask.Model.StackOverflowResponse", null)
                        .WithMany("items")
                        .HasForeignKey("StackOverflowResponseResponseId");
                });

            modelBuilder.Entity("MediportaTask.Model.Collective", b =>
                {
                    b.Navigation("external_links");
                });

            modelBuilder.Entity("MediportaTask.Model.StackOverflowResponse", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("MediportaTask.Model.Tag", b =>
                {
                    b.Navigation("collectives");
                });
#pragma warning restore 612, 618
        }
    }
}
